cReqPRespCross:
Given tc, tp, child sent request at tc, parent sent response at tp, then these
messages cannot cross, i.e. it cannot be true that child hasn't received the
response at any time tc' < tc and parent hasn't received the request at any
time tp' <= tp.
Proof: Convert the above property into a property dependent on t, where forall
tc <= t and tp <= t, the above statement holds. Now we do strong induction on
t. Assume this property holds for all values < t. We need to prove that this
property holds at t.
Parent must have received a request at tp since it can send response only on
receiving a request. Let this request be sent at t1 <= tp (and hence t1 <= t).
Case: t1 = tc:
Must be the same request sent at tc, which was received by parent at tp,
proving the hypothesis for t.
Case: t1 > tc:
Since a second request can be sent only when the child is not waiting, the
first request must have received an appropriate response after tc. This
response must be sent before tp because of FIFO property. Let this response be
sent at t2 < tp (can't be equal to tp because response sent at tp hasn't
reached yet). So t2 < t.  tc < t1 <= t. So tc < t. Now, the response sent at t2
hasn't reached at any time tc' < tc.  The request sent at tc hasn't reached at
any time tp' <= t2. So tc, t2 satisfy induction hypothesis, creating a
contradiction.
Case: tc > t1:
Same argument, switching t1 and tc.

mainInd:
a) conservative directory
b) two responses from parent and child cannot cross, (it cannot be true that
both are received strictly earlier than when they the other is sent)
c) younger requests cannot overtake older responses (both sent from child).
Strictly speaking, it is not possible that a response is sent and a request is
sent later, and that request has reached but the response hasn't reached
strictly before the request was reached.
Proof: Convert the above property into dependent on t, where the times stated
in the above properties without limits are all <= t. Prove by induction on t.
Case: t = 0:
a) Obvious
b) If parent sends a response in the beginning, then a request and response
both have to be sent by the child simultaneously which is not possible.
c) Again, situation will not occur.
Case: t = t+1, assuming true for t:
a) There are two ways a directory will not be conservative: either the child
received an upgrade response while the parent remains same, or the parent
received downgrade response when the child remains the same. Say the child
receives an upgrade response. This has to be sent by the parent, and
afterwards, the parent must have received a downgrade response, violating (b).
Say the parent receives a downgrade response. This has to be sent by the child,
and afterwards, the child must have received an upgrade response, violating (b)
again. So both are not possible.
b) A request must have triggered a response from parent and it must occur
before the response from child was sent to not violate (c). According to
cReqPRespCross, the response from parent must not cross a request from child.
So, the child cannot get any upgrade response between when it sent a request
and when it sent a response.  Moreover, it must have been in the waiting state
since it didn't get any response, which means the child cannot have sent a
voluntary response. This means that a parent must have sent a request that
triggered a response from the child. This request must be sent before the
parent sent its response. The parent must have gotten a response for its
request because it sent a response for the request sent by the child. Let the
last such response be sent by the child at t1 which must be before when the
child sent its crossing response (because of FIFO responses). Now the child
cannot send or receive any response in between the two responses, so the state
must match after sending the first response. This means that the child would
have dropped the request and not send one more response.
c) After the child sends its response, the parent cannot have sent a response
at >= t1, because that would violate crossing. So the parent can only reduce
its state. Let t2 be the last response if the parent received any (or t2 = 0)
before it received the request. Now, the state of the parent after t2 will be
the state of the child at t1, while the state of the child at the time of
sending a request will be < state at t1. So, by the inference rule, parent will
not accept the request, since the from-state of the request will be less than
the state of the parent.

cReqRespSent:
If a request is sent by the parent at t1 and received by the child at t2, then
the state of the child at t2 <= to-state of the request means that there must be
a response sent by the child < t2 whose to-state is less than or equal to that of
the request.
Proof: Consider the last state change by the child. Let's say it was because of
a response received. Then, it must have been sent before the request was sent. Moreover,
because of cross, the parent cannot of received any response in between the sent response
and sent request. Moreover, no response was received by the child in between, so it cannot
be sent in between. The state of the parent at the time of sending the request must be
the state of the child at the time of receiving the request, which means that the hypothesis
about state of child at t2 <= to-state is violated.

If the last state if because of sending a response, then the state of the child is the same,
and it satisfies the hypothesis.

If no state change occurred, then the parent cannot send a request since the child will be in I

vol:
If a request is sent by parent (t1) and a response sent by child (t2), if the
response was received by parent t3 >= t1, and the request was not received by
the child <= t2, and no request was sent by the parent at t5, t1 < t5 <= t3, if
some request was received by the child at t2, then the to-state of that request
must be >= state of the child at t2.
Proof: Basically, I am sending two requests. So, I must have gotten the
response before sending the second request. Consider the last such response
received. No upgrade response must be received by child in the interim because
that will violate FIFO from parent to child. So, state of the child hasn't
changed, which means it must drop the request.

pReqsCVolRespReqLt:
If two requests are sent by parent at <= t, and no request or response in
between, and both the requests haven't reached the child at <= t, then there
exists a response sent by the child at t5, received by the parent at t6, t1 <=
t6 < t2 and forall requests received by the child at t5, the state of the child
is <= to-state of such a request, and to-state of the original second request
must be less than the to-state of the response sent at t5.
Proof: The first part has the same proof as above. We need to prove that the
to-state of the original second request must be less than the to-state of the
response sent at t5. Easy, because parent hasn't sent any response between t6
and t2, and so it can only reduce its state, so to-state of request-2 must be
less than the to-state of response at t6.

pRecvRespPrevState:
The state of sending a response and receiving that response is the same, if
the response is sent by a child.
Proof: It's how the transition rule is written!

cRecvRespPrevState:
The state of sending a response and receiving that response is the same, if
the response is sent by a parent.
Proof: Consider the last transition by child. Say it is receiving a response,
then parent must have sent it earlier, and no transition must have occurred in
parent too (to avoid violating crossing). Say it is sending a response, then
it must reach parent earlier to avoid crossing and no transition must have
occurred in parent too (to avoid FIFO response from parent). If no transition
occurs in child, then no transition would have occurred in parent and hence same.

cWaitImpNotRecvOrSent:
If wait is true at child, there exists a sent request at child, and either the
request has been received by parent and an appropriate response sent back to child
which hasn't been received, or the request hasn't been received by parent.
Proof:
Definitely some request has to be sent or the wait state will be false.
Consider the last request sent by child previously.
Case 1: Request hasn't been received . Qed
Case 2: Request has been received by parent:
Parent must send a response. If that response has already been received by child, then
wait state must become false and no more request has been sent.

pWaitImpNotRecvOrSent:
Same wrt parent.

pReqRespCDropReq:
If parent sends response at sm <= t, and it wasn't received by child at any y < t,
if a request was sent by parent at sr < sm which also wasn't received by child
at y < t, then state of child at t <= to-state of request.
Proof: There must be a response sent by child for request sent at sr. Let's say
that response was sent after t1. Consider the last such response. It cannot
receive any response from parent to avoid crossing. The state remains the same,
which is <= to-state of request.

cRespBadExCResp:
If a child sends a response at sr < t, and it wasn't received at any y < t,
either state of parent is = from-state of response, or there exists another
response sent < sr by child which hasn't been received by parent < t.
Proof: Consider the case when state of parent <> from-state of response.
Consider the last state change at parent.
Case: No state change at parent:
Child never upgraded, so it cannot send a response.
Case: It's a downgrade from child:
Unless the child has downgraded further, the states will match, and the downgrade cannot
be received before t.
Case: It's an upgrade from parent:
Unless the child has downgraded further, the states will match, and the downgrade cannot
be received before t.

cRespGoodNoEarlier:
If a child sends a response at sr < t, and it wasn't received at any y < t,
and from-state of response = state of parent, and another response x was
sent at sx < sr from child, then x must be received by parent at < t.
Proof: Proof by contradiction on cRespBadExCResp. Let's say another response
was not received. Consider the first such response x sent at sx not received by
parent.  The from-state of this response is > from-state of response sent at sr
since the child wouldn't receive any response from parent which would violate
crossing. Hence the from-state of this response sent at sx is not equal to
state of parent at t. That means that there must be another response sent < sx
which hasn't been received by parent < t, violating the minimum condition.

cRespBadExCGoodResp:
If a child sends a response at sr < t, and it wasn't received at any y < t, if
from-state of response != state of parent, there exists a response sent by
child at sm < sr whose from-state = state of parent at t and it hasn't been
received at < t at parent, and every other response sent before sm by child has
been received by parent.
Proof: By cRespBadExCResp, there must be at least one response sent by child at
< sr not received at < t at parent. Consider the first such responses sent at
sm. Every response before this has been received by parent. We need to prove that
from-state of response sent at sm = state of parent at t. Consider the last state
change at parent.
Case: No state change at parent:
Child never upgraded, so it cannot send a response.
Case: It's a downgrade from child:
Child cannot get any upgrade message from parent between the case's response and one
at sm to assert crossing. Any downgrade message cannot reach parent before t, and after t,
sm is the first such message. So the from-state of sm will match the state of parent at t.
Case: It's an upgrade from parent:
Child cannot get any upgrade message from parent. Any downgrade message cannot
reach parent before t, and after t, sm is the first such message. So the
from-state of sm will match the state of parent at t.

cRespExCGoodResp:
If a child sends a response at sr < t, and it wasn't received at any y < t,
there exists a response sent by parent at sm <= sr such that from-state of
response = state of parent that hasn't been received at < t at parent and
every response sent before sm by child has been received by parent.
Proof:
Case: from-state of response = state of parent:
Every previous response to sr has been received by parent according to
cRespGoodNoEarlier.  Response sent at sr hasn't been received, and that's the
answer.
Case: from-state of response != state of parent:
The response given by cRespBadExCGoodResp is the answer.

cReqBadExCResp:
If a child sends a request at sr < t, and it wasn't received at any y < t,
either state of parent is <= from-state of request, or there exists another
response sent < t by child which hasn't been received by parent < t.
Proof: Consider when state of parent > from-state of request. Consider
the last state change at parent.
Case: No state change at parent:
Parent will remain I which cannot be > from-state of request.
Case: It's a downgrade from child:
Subcase1: Response was sent before request by child:
Unless the child has downgraded further, the states will match, and the
downgrade cannot be received before t.
Subcase2: Response was sent after request by child:
No response must be received by child between the sending of request and
sending of the subcase's response (otherwise it will violate cReqPRespCross).
So, state at parent after receiving subcase's response will be strictly lower
than the from-state of the request.
Case: It's an upgrade from parent:
Unless the child has downgraded further, the states will match, and the
downgrade cannot be received before t.

cReqBadExCGoodResp:
If a child sends a request at sr < t, and it wasn't received at any y < t, if
state of parent > from-state of request, there exists a response sent by child
at sm < t such that from-state of response = state of parent at t, and this
response hasn't been received at < t at parent and every response sent
before sm by child has been received by parent.
Proof: Using cReqBadExCResp, we know that there is another response sent < t
which hasn't been received by parent < t. This means there must be another
response by cRespExCGoodResp, such that from-state of this response = state of
parent at t, and this response hasn't been received at < t at parent and every
response sent before sm by child has been received by parent.


Prove that no rule is blocked
Proof:
a) cReqBadExCGoodResp and cRespExCGoodResp ensures that whenever any message is
in flight, then the appropriate response is in flight to trigger a rule (for
the request case which is not processable, another processable response is
present)
b) If messages are in the network and not in the cache's buffer, transfer.
c) If no response is present, then choose the parent to child request closest
to the processor (break arbitrarily in case of tie). This request can be
processed independent of anything (either Drop, or Send Response - response
should be sendable as no response is present in the system). Wait state will be
false since there are no requests to or responses from the child
d) If no such parent to child request is present, choose the child to parent
request farthest from processor (break ties arbitrarily). This request will
trigger one of the req-rules. Wait state will be false since there are no
requests to or responses from the parent.
For both (c) and (d):
- in case it sends a response, that can be sent because no response is present
- in case it sends another request downstream to parent, it can since the
  requests were empty there
- in case it sends another request upsteam to children, it can since the
  request were empty there
e) If all else fails, at least one of the two methods can fire. (In the above,
responses sitting in the output queues are not considered actual responses).

Prove that each input request climbs a lattice
Proof:
Invariant: If the request is present in the input queue, then if a node has
stopped waiting, then it will be in correct state (TOOOO WEAK, MUST STRENGTHEN)
